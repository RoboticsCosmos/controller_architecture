append_vector_to_a_file_functions() ::= <<
// Function to append data to the file with dynamic size of vector
template \<size_t N>
void appendDataToFile_dynamic_size(std::ofstream &file, const std::vector\<std::array\<double, N>\> &data)
{
    for (const auto &row : data)
    {
        for (size_t i = 0; i \< N; ++i)
        {
            file \<\< row[i];
            if (i \< N - 1)
            {
                file \<\< ",";
            }
        }
        file \<\< "\n";
    }
}
>>


set_robots_to_control() ::= <<
    // set robots to control
    robot_controlled robots_to_control = robot_controlled::DUAL_KINOVA_GEN3_ARMS;
>>


signal_interruption_handling_function() ::= <<
    // handling signals
    struct sigaction sa;
    sa.sa_handler = handle_signal;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;

    for (int i = 1; i \< NSIG; ++i)
    {
        if (sigaction(i, &sa, NULL) == -1)
        {
            perror("sigaction");
        }
    }
>>


read_from_config_file_and_set_variables() ::= <<
    // initialise data by reading from the config file
    double TIMEOUT_DURATION_TASK; // in seconds
    double WRENCH_THRESHOLD_LINEAR;
    double WRENCH_THRESHOLD_ROTATIONAL;
    double JOINT_TORQUE_THRESHOLD;
    int SAVE_LOG_EVERY_NTH_STEP;
    double DESIRED_TIME_STEP;

    YAML::Node config_file = YAML::LoadFile("parameters.yaml");
    std::vector\<float> arm1_home = config_file["arm_1"]["home"].as\<std::vector\<float>\>();
    std::vector\<float> arm2_home = config_file["arm_2"]["home"].as\<std::vector\<float>\>();
    TIMEOUT_DURATION_TASK = config_file["TIMEOUT_DURATION_TASK"].as\<double>(); // seconds
    WRENCH_THRESHOLD_LINEAR = config_file["WRENCH_THRESHOLD_LINEAR"].as\<double>();
    WRENCH_THRESHOLD_ROTATIONAL = config_file["WRENCH_THRESHOLD_ROTATIONAL"].as\<double>();
    JOINT_TORQUE_THRESHOLD = config_file["JOINT_TORQUE_THRESHOLD"].as\<double>();
    SAVE_LOG_EVERY_NTH_STEP = config_file["SAVE_LOG_EVERY_NTH_STEP"].as\<int>();
    DESIRED_TIME_STEP = config_file["DESIRED_TIME_STEP"].as\<double>();
>>

commented_print_statement_for_abs_distance_bw_both_arms() ::= <<
    abs_distance_between_both_arms_y_axis_data = std::abs(measured_lin_pos_y_axis_left_arm_data - measured_lin_pos_y_axis_right_arm_data);

    // std::cout \<\< "x-left: " \<\< measured_lin_pos_x_axis_left_arm_data \<\< " y-left: " \<\< measured_lin_pos_y_axis_left_arm_data \<\< " z-left: " \<\< measured_lin_pos_z_axis_left_arm_data \<\< std::endl;
    // std::cout \<\< "x-right: " \<\< measured_lin_pos_x_axis_right_arm_data \<\< " y-right: " \<\< measured_lin_pos_y_axis_right_arm_data \<\< " z-right: " \<\< measured_lin_pos_z_axis_right_arm_data \<\< std::endl;
    // std::cout \<\< "diff-y: " \<\< abs_distance_between_both_arms_y_axis_data \<\< std::endl;
>>

initialise_logging_file_and_headers_uc3_pid() ::= <<

  // logging
  std::string log_file_left = "log_files/log_file_left_uc3_pid.csv";
  std::string log_file_right = "log_files/log_file_right_uc3_pid.csv";
  std::ofstream data_stream_log_left(log_file_left);
  std::ofstream data_stream_log_right(log_file_right);

  if (!data_stream_log_left.is_open())
  {
    std::cerr \<\< "Failed to open file: " \<\< log_file_left \<\< std::endl;
    return 0;
  }
  if (!data_stream_log_right.is_open())
  {
    std::cerr \<\< "Failed to open file: " \<\< log_file_right \<\< std::endl;
    return 0;
  }
  // adding header
  data_stream_log_left \<\< "controller_name_data_left_z,time_period_of_complete_controller_cycle_data,measured_lin_pos_z_axis_left_arm_data,measured_lin_vel_z_axis_left_arm_data,lin_vel_error_pid_z_axis_left_arm_data,lin_pos_error_stiffness_z_axis_left_arm_data,p_term_lin_vel_z_axis_left_arm_data,d_term_lin_vel_error_z_axis_left_arm_data,d_term_lin_vel_z_axis_left_arm_data,i_term_lin_vel_z_axis_left_arm_data,apply_ee_force_z_axis_left_arm_data\n";
  data_stream_log_right \<\< "controller_name_data_right_z,time_period_of_complete_controller_cycle_data,measured_lin_pos_z_axis_right_arm_data,measured_lin_vel_z_axis_right_arm_data,lin_vel_error_pid_z_axis_right_arm_data,lin_pos_error_stiffness_z_axis_right_arm_data,p_term_lin_vel_z_axis_right_arm_data,d_term_lin_vel_error_z_axis_right_arm_data,d_term_lin_vel_z_axis_right_arm_data,i_term_lin_vel_z_axis_right_arm_data,apply_ee_force_z_axis_right_arm_data\n";

  // initialise multi-dimensional array to store data
  std::vector\<std::array\<double, 11>\> data_array_log_left;
  std::vector\<std::array\<double, 11>\> data_array_log_right;
  int iterationCount = 0;
>>

initialise_logging_file_and_headers_uc3_abag() ::= <<

  // logging
  std::string log_file_left = "log_files/log_file_left_abag.csv";
  std::string log_file_right = "log_files/log_file_right_abag.csv";
  std::ofstream data_stream_log_left(log_file_left);
  std::ofstream data_stream_log_right(log_file_right);

  if (!data_stream_log_left.is_open())
  {
    std::cerr \<\< "Failed to open file: " \<\< log_file_left \<\< std::endl;
    return 0;
  }
  if (!data_stream_log_right.is_open())
  {
    std::cerr \<\< "Failed to open file: " \<\< log_file_right \<\< std::endl;
    return 0;
  }
  // adding header
  data_stream_log_left \<\< "controller_name_data_left_z,time_period_of_complete_controller_cycle_data,measured_lin_pos_z_axis_left_arm_data,measured_lin_vel_z_axis_left_arm_data,lin_pos_error_stiffness_z_axis_left_arm_data,apply_ee_force_z_axis_left_arm_data,abag_saturation_of_control_command_signal_z_axis_left_arm_data,abag_filtered_error_signal_z_axis_left_arm_data,abag_error_signal_z_axis_left_arm_data,abag_saturation_of_bias_term_z_axis_left_arm_data,abag_saturation_of_gain_z_axis_left_arm_data\n";
  data_stream_log_right \<\< "controller_name_data_right_z,time_period_of_complete_controller_cycle_data,measured_lin_pos_z_axis_right_arm_data,measured_lin_vel_z_axis_right_arm_data,lin_pos_error_stiffness_z_axis_right_arm_data,apply_ee_force_z_axis_right_arm_data,abag_saturation_of_control_command_signal_z_axis_right_arm_data,abag_filtered_error_signal_z_axis_right_arm_data,abag_error_signal_z_axis_right_arm_data,abag_saturation_of_bias_term_z_axis_right_arm_data,abag_saturation_of_gain_z_axis_right_arm_data\n";

  // initialise multi-dimensional array to store data
  std::vector\<std::array\<double, 11>\> data_array_log_left;
  std::vector\<std::array\<double, 11>\> data_array_log_right;
  int iterationCount = 0;
>>

initialise_logging_file_and_headers_uc1() ::= <<

    // logging
    std::string log_file_left = "log_files/uc1_log_file_left.csv";
    std::string log_file_right = "log_files/uc1_log_file_right.csv";
    std::ofstream data_stream_log_left(log_file_left);
    std::ofstream data_stream_log_right(log_file_right);

    if (!data_stream_log_left.is_open())
    {
        std::cerr \<\< "Failed to open file: " \<\< log_file_left \<\< std::endl;
        return 0;
    }
    if (!data_stream_log_right.is_open())
    {
        std::cerr \<\< "Failed to open file: " \<\< log_file_right \<\< std::endl;
        return 0;
    }
    // adding header
    data_stream_log_left \<\< "controller_name_data_left_z,time_period_of_complete_controller_cycle_data,measured_lin_pos_z_axis_left_arm_data,measured_lin_vel_z_axis_left_arm_data,lin_vel_error_pid_z_axis_left_arm_data,lin_vel_error_damping_z_axis_left_arm_data,lin_pos_error_stiffness_z_axis_left_arm_data,p_term_lin_vel_z_axis_left_arm_data,d_term_lin_vel_error_z_axis_left_arm_data,d_term_lin_vel_z_axis_left_arm_data,integral_of_vel_term_error_z_axis_left_arm_data,i_term_lin_vel_z_axis_left_arm_data,stiffness_term_lin_z_axis_left_arm_data,damping_term_z_axis_left_arm_data,apply_ee_force_z_axis_left_arm_data\n";
    data_stream_log_right \<\< "controller_name_data_right_z,time_period_of_complete_controller_cycle_data,measured_lin_pos_z_axis_right_arm_data,measured_lin_vel_z_axis_right_arm_data,lin_vel_error_pid_z_axis_right_arm_data,lin_vel_error_damping_z_axis_right_arm_data,lin_pos_error_stiffness_z_axis_right_arm_data,p_term_lin_vel_z_axis_right_arm_data,d_term_lin_vel_error_z_axis_right_arm_data,d_term_lin_vel_z_axis_right_arm_data,integral_of_vel_term_error_z_axis_right_arm_data,i_term_lin_vel_z_axis_right_arm_data,stiffness_term_lin_z_axis_right_arm_data,damping_term_z_axis_right_arm_data,apply_ee_force_z_axis_right_arm_data\n";

    // initialise multi-dimensional array to store data
    std::vector\<std::array\<double, 15>\> data_array_log_left;
    std::vector\<std::array\<double, 15>\> data_array_log_right;
    int iterationCount = 0;
>>


initialise_time_variables() ::= <<

    auto start_time_of_task = std::chrono::high_resolution_clock::now(); // start_time_of_task.count() gives time in seconds
    const auto task_time_out = std::chrono::duration\<double>(TIMEOUT_DURATION_TASK);
    auto previous_time = std::chrono::high_resolution_clock::now();
    auto time_elapsed = std::chrono::duration\<double>(previous_time - start_time_of_task);
>>


if_interrupt_signal_detected_write_rest_of_data_and_close_files() ::= <<

        // if any interruption (Ctrl+C or window resizing) is detected
        if (flag == 1)
        {
            // logging
            // Write remaining data to file
            if (!data_array_log_left.empty())
            {
                appendDataToFile_dynamic_size(data_stream_log_left, data_array_log_left);
                data_array_log_left.clear();
            }

            if (!data_array_log_right.empty())
            {
                appendDataToFile_dynamic_size(data_stream_log_right, data_array_log_right);
                data_array_log_right.clear();
            }

            data_stream_log_left.close();
            data_stream_log_right.close();
            std::cout \<\< "Data collection completed.\n";
            break;
        }

>>


update_time_related_variables_in_while_loop() ::= <<
        // update the time variables
        auto current_time = std::chrono::high_resolution_clock::now();
        auto time_period = std::chrono::duration\<double>(current_time - previous_time);

        while (time_period.count() \< DESIRED_TIME_STEP)
        {
            current_time = std::chrono::high_resolution_clock::now();
            time_period = std::chrono::duration\<double>(current_time - previous_time);
        }

        time_elapsed = std::chrono::duration\<double>(current_time - start_time_of_task);
        previous_time = current_time;
        time_period_of_complete_controller_cycle_data = time_period.count();
        std::cout \<\< "time_period: " \<\< time_period_of_complete_controller_cycle_data \<\< std::endl;
>>


set_robot_feedback_to_corresponding_variables() ::= <<

        measured_lin_pos_x_axis_left_arm_data = measured_endEffPose_GF_left_arm.p.x();
        measured_lin_vel_x_axis_left_arm_data = measured_endEffTwist_GF_left_arm.GetTwist().vel.x();
        measured_lin_pos_y_axis_left_arm_data = measured_endEffPose_GF_left_arm.p.y();
        measured_lin_vel_y_axis_left_arm_data = measured_endEffTwist_GF_left_arm.GetTwist().vel.y();
        measured_lin_pos_z_axis_left_arm_data = measured_endEffPose_GF_left_arm.p.z();
        measured_lin_vel_z_axis_left_arm_data = measured_endEffTwist_GF_left_arm.GetTwist().vel.z();

        measured_lin_pos_x_axis_right_arm_data = measured_endEffPose_GF_right_arm.p.x();
        measured_lin_vel_x_axis_right_arm_data = measured_endEffTwist_GF_right_arm.GetTwist().vel.x();
        measured_lin_pos_y_axis_right_arm_data = measured_endEffPose_GF_right_arm.p.y();
        measured_lin_vel_y_axis_right_arm_data = measured_endEffTwist_GF_right_arm.GetTwist().vel.y();
        measured_lin_pos_z_axis_right_arm_data = measured_endEffPose_GF_right_arm.p.z();
        measured_lin_vel_z_axis_right_arm_data = measured_endEffTwist_GF_right_arm.GetTwist().vel.z();

>>

push_collected_data_to_array_uc1() ::= <<
        data_array_log_left.push_back({controller_name_data_left_z, time_period_of_complete_controller_cycle_data, measured_lin_pos_z_axis_left_arm_data, measured_lin_vel_z_axis_left_arm_data, lin_vel_error_pid_z_axis_left_arm_data, lin_vel_error_damping_z_axis_left_arm_data, lin_pos_error_stiffness_z_axis_left_arm_data, p_term_lin_vel_z_axis_left_arm_data, d_term_lin_vel_error_z_axis_left_arm_data, d_term_lin_vel_z_axis_left_arm_data, integral_of_vel_term_error_z_axis_left_arm_data, i_term_lin_vel_z_axis_left_arm_data, stiffness_term_lin_z_axis_left_arm_data, damping_term_z_axis_left_arm_data, apply_ee_force_z_axis_left_arm_data});
        data_array_log_right.push_back({controller_name_data_right_z, time_period_of_complete_controller_cycle_data, measured_lin_pos_z_axis_right_arm_data, measured_lin_vel_z_axis_right_arm_data, lin_vel_error_pid_z_axis_right_arm_data, lin_vel_error_damping_z_axis_right_arm_data, lin_pos_error_stiffness_z_axis_right_arm_data, p_term_lin_vel_z_axis_right_arm_data, d_term_lin_vel_error_z_axis_right_arm_data, d_term_lin_vel_z_axis_right_arm_data, integral_of_vel_term_error_z_axis_right_arm_data, i_term_lin_vel_z_axis_right_arm_data, stiffness_term_lin_z_axis_right_arm_data, damping_term_z_axis_right_arm_data, apply_ee_force_z_axis_right_arm_data});
>>

push_collected_data_to_array_uc3_pid() ::= <<
        data_array_log_left.push_back({controller_name_data_left_z, time_period_of_complete_controller_cycle_data, measured_lin_pos_z_axis_left_arm_data, measured_lin_vel_z_axis_left_arm_data, lin_vel_error_pid_z_axis_left_arm_data, lin_pos_error_stiffness_z_axis_left_arm_data, p_term_lin_vel_z_axis_left_arm_data, d_term_lin_vel_error_z_axis_left_arm_data, d_term_lin_vel_z_axis_left_arm_data, i_term_lin_vel_z_axis_left_arm_data, apply_ee_force_z_axis_left_arm_data});
        data_array_log_right.push_back({controller_name_data_right_z, time_period_of_complete_controller_cycle_data, measured_lin_pos_z_axis_right_arm_data, measured_lin_vel_z_axis_right_arm_data, lin_vel_error_pid_z_axis_right_arm_data, lin_pos_error_stiffness_z_axis_right_arm_data, p_term_lin_vel_z_axis_right_arm_data, d_term_lin_vel_error_z_axis_right_arm_data, d_term_lin_vel_z_axis_right_arm_data, i_term_lin_vel_z_axis_right_arm_data, apply_ee_force_z_axis_right_arm_data});
>>

push_collected_data_to_array_uc3_abag() ::= <<
    data_array_log_left.push_back({controller_name_data_left_z, time_period_of_complete_controller_cycle_data, measured_lin_pos_z_axis_left_arm_data, measured_lin_vel_z_axis_left_arm_data, lin_pos_error_stiffness_z_axis_left_arm_data, apply_ee_force_z_axis_left_arm_data, abag_saturation_of_control_command_signal_z_axis_left_arm_data, abag_filtered_error_signal_z_axis_left_arm_data, abag_error_signal_z_axis_left_arm_data, abag_saturation_of_bias_term_z_axis_left_arm_data, abag_saturation_of_gain_z_axis_left_arm_data});
    data_array_log_right.push_back({controller_name_data_right_z, time_period_of_complete_controller_cycle_data, measured_lin_pos_z_axis_right_arm_data, measured_lin_vel_z_axis_right_arm_data, lin_pos_error_stiffness_z_axis_right_arm_data, apply_ee_force_z_axis_right_arm_data, abag_saturation_of_control_command_signal_z_axis_right_arm_data, abag_filtered_error_signal_z_axis_right_arm_data, abag_error_signal_z_axis_right_arm_data, abag_saturation_of_bias_term_z_axis_right_arm_data, abag_saturation_of_gain_z_axis_right_arm_data});
>>

update_logging_arrays_and_add_to_file_if_sufficient_data_collected() ::= <<
        // Check if we should write to file
        iterationCount++;
        if (iterationCount % SAVE_LOG_EVERY_NTH_STEP == 0)
        {
            appendDataToFile_dynamic_size(data_stream_log_left, data_array_log_left);
            appendDataToFile_dynamic_size(data_stream_log_right, data_array_log_right);
            data_array_log_left.clear();
            data_array_log_right.clear();
        }
>>

save_remaining_data_before_exiting_the_program() ::= <<

    if (!data_array_log_left.empty())
    {
        appendDataToFile_dynamic_size(data_stream_log_left, data_array_log_left);
        data_array_log_left.clear();
    }
    if (!data_array_log_right.empty())
    {
        appendDataToFile_dynamic_size(data_stream_log_right, data_array_log_right);
        data_array_log_right.clear();
    }

    data_stream_log_left.close();
    std::cout \<\< "Data collection completed.\n";
>>
